#shell.executable("/bin/bash")
#shell.prefix("source $HOME/.bashrc; ")

#import os

IDS, = glob_wildcards("genomes/{genome_id}.gb") # get all genomes in genomes dir
CAMISIM_DIR = "/home/people/katste/camisim/CAMISIM"

#rule all_qc:
#    input: expand("qc/{genome_id}1_fastqc.html", genome_id=[genomeid.replace(".", "_") for genomeid in IDS])

rule camisim_metafiles:
    params:
        genome_files = " ".join(expand('genomes/{genome_ids}.gb', genome_ids=IDS))
    output:
        fastas = expand('camisim_fasta/{genome_ids}.fa', genome_ids=IDS),
        camisim_metafile = 'camisim_configfiles/metadata',
        camisim_genomefile = 'camisim_configfiles/id_to_genome_file'
    shell:
        '''module load anaconda3/4.4.0
        python3 /home/projects/cge/data/projects/other/simulatedMAGpipeline/magician/magician/extract_camisim_data.py {params.genome_files}
        '''

rule camisim_configfiles:
    input:
        camisim_metafile = 'camisim_configfiles/metadata',
        camisim_genomefile = 'camisim_configfiles/id_to_genome_file'
    params:
        camisim_dir = CAMISIM_DIR
    output:
        camisim_configfile = 'camisim_config_snaked.ini'
    shell:
         '''module load anaconda3/4.4.0
         python3 /home/projects/cge/data/projects/other/simulatedMAGpipeline/magician/magician/generate_camisim_config.py \
         {params.camisim_dir} {input.camisim_metafile} {input.camisim_genomefile} -f {output.camisim_configfile}
         '''

rule run_camisim:
    input:
        camisim_configfile = 'camisim_config_snaked.ini'
    output:
        concat_results = 'camisim_out/simulated_metagenome.gz'
    shell:
        '''module load anaconda2/4.4.0
        python2 {CAMISIM_DIR}/metagenomesimulation.py {input.camisim_configfile}
        cat camisim_out/*/reads/*.fq.gz > {output.concat_results}
        '''


rule fastqc:
    input:
          reads = 'camisim_out/simulated_metagenome.gz'
    output:
          qc_data = 'qc/simulated_metagenome_fastqc.html'
    shell:
         '''module load tools ngs
         module load perl openjdk/14 fastqc/0.11.8
         if [ ! -d "qc" ];\
          then mkdir "qc"; fi
         fastqc -o qc {input.reads}
         '''
# TODO: there has to be a better way than this
#rule move_qc:
#    input:
#         qc_dir =
#    output:
#          new_qc = directory('qc/current_qc')
#    shell:
#         '''if [ ! -d "{output.new_qc}" ];\
#          then mkdir -p "{output.new_qc}"; fi
#          cp -a {input.qc_dir}/. {output.new_qc}/
#          '''